/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package {{package}}.{{controller}};



{{#imports}}import {{import}};
{{/imports}}
import {{package}}.{{service}}.{{{baseName}}}Service;
{{#swagger2AnnotationLibrary}}
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
{{/swagger2AnnotationLibrary}}
{{#swagger1AnnotationLibrary}}
import io.swagger.annotations.*;
{{/swagger1AnnotationLibrary}}
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
{{#useBeanValidation}}
import org.springframework.validation.annotation.Validated;
{{/useBeanValidation}}
import org.springframework.web.bind.annotation.*;
{{#useBeanValidation}}
{{#useJakartaEe}}
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
{{/useJakartaEe}}
{{^useJakartaEe}}
import javax.validation.Valid;
import javax.validation.constraints.*;
{{/useJakartaEe}}
{{/useBeanValidation}}
import java.util.List;
import java.util.Map;
{{#jdk8-no-delegate}}
import java.util.Optional;
{{/jdk8-no-delegate}}
import lombok.RequiredArgsConstructor;
{{^jdk8-no-delegate}}
{{#useOptional}}
import java.util.Optional;
{{/useOptional}}
{{/jdk8-no-delegate}}
{{#useJakartaEe}}
import jakarta.annotation.Generated;
{{/useJakartaEe}}
{{^useJakartaEe}}
import javax.annotation.Generated;
{{/useJakartaEe}}

{{>generatedAnnotation}}

{{#useBeanValidation}}
@Validated
{{/useBeanValidation}}
{{#swagger2AnnotationLibrary}}
    @Tag(name = "{{{baseName}}}", description = {{#tagDescription}}"{{{.}}}"{{/tagDescription}}{{^tagDescription}}"the {{{baseName}}} API"{{/tagDescription}})
{{/swagger2AnnotationLibrary}}
{{#swagger1AnnotationLibrary}}
    @Api(value = "{{{baseName}}}", description = {{#tagDescription}}"{{{.}}}"{{/tagDescription}}{{^tagDescription}}"the {{{baseName}}} API"{{/tagDescription}})
{{/swagger1AnnotationLibrary}}
{{#operations}}
@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class {{classname}}Controller {

    private final {{{baseName}}}Service {{classVarName}}{{serviceName}};

{{#operation}}
    /**
    * {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}
    {{#notes}}
    * {{.}}
    {{/notes}}
    *
    {{#allParams}}
    * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
    {{/allParams}}
    * @return {{#responses}}{{message}} (status code {{code}}){{^-last}}
    *         or {{/-last}}{{/responses}}
    {{#isDeprecated}}
    * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
    * {{description}}
    * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
    */
    {{#virtualService}}
        @ApiVirtual
    {{/virtualService}}
    {{#swagger2AnnotationLibrary}}
        @Operation(
        operationId = "{{{operationId}}}",
        {{#summary}}
            summary = "{{{.}}}",
        {{/summary}}
        {{#description}}
            description= "{{{.}}}",
        {{/description}}
        {{#vendorExtensions.x-tags.size}}
            tags = { {{#vendorExtensions.x-tags}}"{{tag}}"{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}} },
        {{/vendorExtensions.x-tags.size}}
        responses = {
        {{#responses}}
            @ApiResponse(responseCode = "{{{code}}}", description = "{{{message}}}"{{#baseType}}, content = {
            {{#produces}}
                @Content(mediaType = "{{{mediaType}}}", schema = @Schema(implementation = {{{baseType}}}.class)){{^-last}},{{/-last}}
            {{/produces}}
            }{{/baseType}}){{^-last}},{{/-last}}
        {{/responses}}
        }{{#hasAuthMethods}},
        security = {
        {{#authMethods}}
            @SecurityRequirement(name = "{{name}}"{{#isOAuth}}, scopes={ {{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}} }{{/isOAuth}}){{^-last}},{{/-last}}
        {{/authMethods}}
        }{{/hasAuthMethods}}
        )
    {{/swagger2AnnotationLibrary}}
    {{#swagger1AnnotationLibrary}}
        @ApiOperation(
        {{#vendorExtensions.x-tags.size}}
            tags = { {{#vendorExtensions.x-tags}}"{{tag}}"{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}} },
        {{/vendorExtensions.x-tags.size}}
        value = "{{{summary}}}",
        nickname = "{{{operationId}}}",
        notes = "{{{notes}}}"{{#returnBaseType}},
        response = {{{.}}}.class{{/returnBaseType}}{{#returnContainer}},
        responseContainer = "{{{.}}}"{{/returnContainer}}{{#hasAuthMethods}},
        authorizations = {
        {{#authMethods}}
            {{#isOAuth}}
                @Authorization(value = "{{name}}", scopes = {
                {{#scopes}}
                    @AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{^-last}},{{/-last}}
                {{/scopes}}
                }){{^-last}},{{/-last}}
            {{/isOAuth}}
            {{^isOAuth}}
                @Authorization(value = "{{name}}"){{^-last}},{{/-last}}
            {{/isOAuth}}
        {{/authMethods}} }{{/hasAuthMethods}}
        )
        @ApiResponses({
        {{#responses}}
            @ApiResponse(code = {{{code}}}, message = "{{{message}}}"{{#baseType}}, response = {{{.}}}.class{{/baseType}}{{#containerType}}, responseContainer = "{{{.}}}"{{/containerType}}){{^-last}},{{/-last}}
        {{/responses}}
        })
    {{/swagger1AnnotationLibrary}}
    {{#implicitHeadersParams.0}}
        {{#swagger2AnnotationLibrary}}
            @Parameters({
            {{#implicitHeadersParams}}
                {{>paramDoc}}{{^-last}},{{/-last}}
            {{/implicitHeadersParams}}
        {{/swagger2AnnotationLibrary}}
        {{#swagger1AnnotationLibrary}}
            @ApiImplicitParams({
            {{#implicitHeadersParams}}
                {{>implicitHeader}}{{^-last}},{{/-last}}
            {{/implicitHeadersParams}}
        {{/swagger1AnnotationLibrary}}
        })
    {{/implicitHeadersParams.0}}
    @{{#lambda}}{{#lambdaCapitalize}}{{httpMethod}}{{/lambdaCapitalize}}{{/lambda}}Mapping("{{{path}}}")
    public {{#responseWrapper}}{{.}}<{{/responseWrapper}}ResponseEntity<{{>returnTypes}}>{{#responseWrapper}}>{{/responseWrapper}}{{#delegate-method}}_{{/delegate-method}}{{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{>cookieParams}}{{^-last}},
        {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}},
        {{/hasParams}}{{#swagger2AnnotationLibrary}}@Parameter(hidden = true){{/swagger2AnnotationLibrary}}{{#springFoxDocumentationProvider}}@ApiIgnore{{/springFoxDocumentationProvider}} final ServerWebExchange exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}{{#hasParams}},
        {{/hasParams}}{{#springFoxDocumentationProvider}}@ApiIgnore {{/springFoxDocumentationProvider}}{{#springDocDocumentationProvider}}@ParameterObject {{/springDocDocumentationProvider}}final Pageable pageable{{/vendorExtensions.x-spring-paginated}}){{#unhandledException}} throws Exception{{/unhandledException}}{
        {{#hasProduces}}{{>returnTypes}} value = {{/hasProduces}}{{classVarName}}Service.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}}, {{/hasParams}}exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}, pageable{{/vendorExtensions.x-spring-paginated}});
        {{#hasProduces}}return new ResponseEntity<>(value, HttpStatus.OK);{{/hasProduces}}{{^hasProduces}}return ResponseEntity.status(HttpStatus.OK).build();{{/hasProduces}}
    }
    //----------------------------------------------------------------
    {{/operation}}
    }
{{/operations}}
